.class abstract sealed CLIHeader { // II.25.3.3
  .method public static void Write() {
    ldc.i4 0x48
    call void C::Write(int32)

    ldc.i4.2
    call void C::Write(int16)
    ldc.i4.0
    call void C::Write(int16)

    ldc.i4 0x2068 // TODO(link) MetadataRoot RVA
    call void C::Write(int32)
    
    // Metadata Size
    ldsfld int64 BlobHeap::fileEnd
    ldsfld int64 MetadataRoot::fileStart
    sub
    conv.i4
    call void C::Write(int32)

    ldc.i4.1
    call void C::Write(int32)
    ldc.i4 0x6000001 // TODO(link) EntryPointToken MethodDef table first row
    call void C::Write(int32)

    ldc.i4 0x30 // Resources StrongNameSignature CodeManagerTable VTableFixups
    newarr uint8
    call void C::Write(uint8[])

    ret
  }
}

.class abstract sealed MetadataRoot { // II.24.2.1
  .field public static int64 fileStart

  .method public static void Write() {
    call int64 C::Pos()
    stsfld int64 MetadataRoot::fileStart

    ldstr "BSJB"
    call void C::WriteUTF8(string)

    ldc.i4.1
    call void C::Write(int16)
    ldc.i4.1
    call void C::Write(int16)

    ldc.i4.0
    call void C::Write(int32)

    ldc.i4 12 // length of following string, with null terminal, to 4-byte alignment
    call void C::Write(int32)

    ldstr "v4.0.30319"
    call void C::WriteUTF8(string)
    ldc.i4.0
    call void C::Write(uint8)
    ldc.i4.4
    call void C::ZeroUntilMultiple(uint32)

    ldc.i4.0
    call void C::Write(int16)

    call void StreamHeader::Write()

    ret
  }
}

.class public abstract sealed TildeStream { // II.24.2.6
  .field public static initonly uint8 Module
  .field public static initonly uint8 TypeRef
  .field public static initonly uint8 TypeDef
  .field public static initonly uint8 Field
  .field public static initonly uint8 MethodDef
  .field public static initonly uint8 Param
  .field public static initonly uint8 InterfaceImpl
  .field public static initonly uint8 MemberRef
  .field public static initonly uint8 Constant
  .field public static initonly uint8 CustomAttribute = uint8(0x0C)
  .field public static initonly uint8 FieldMarshal
  .field public static initonly uint8 DeclSecurity
  .field public static initonly uint8 ClassLayout
  .field public static initonly uint8 FieldLayout
  .field public static initonly uint8 StandAloneSig
  .field public static initonly uint8 EventMap
  .field public static initonly uint8 Event
  .field public static initonly uint8 PropertyMap
  .field public static initonly uint8 Property
  .field public static initonly uint8 MethodSemantics
  .field public static initonly uint8 MethodImpl
  .field public static initonly uint8 ModuleRef
  .field public static initonly uint8 TypeSpec
  .field public static initonly uint8 ImplMap
  .field public static initonly uint8 FieldRVA
  .field public static initonly uint8 Assembly
  .field public static initonly uint8 AssemblyProcessor
  .field public static initonly uint8 AssemblyOS
  .field public static initonly uint8 AssemblyRef
  .field public static initonly uint8 AssemblyRefProcessor
  .field public static initonly uint8 AssemblyRefOS
  .field public static initonly uint8 File
  .field public static initonly uint8 ExportedType
  .field public static initonly uint8 ManifestResource
  .field public static initonly uint8 NestedClass
  .field public static initonly uint8 GenericParam
  .field public static initonly uint8 MethodSpec
  .field public static initonly uint8 GenericParamConstraint

  .field public static int64 fileStart
  .field public static int64 fileEnd

  .field private static class MetaTable[] tables

  .method static hidebysig specialname rtspecialname default void .cctor() {
    .locals init (int32 i)

    ldc.i4.s 0x00
    stsfld uint8 TildeStream::Module
    ldc.i4.s 0x01
    stsfld uint8 TildeStream::TypeRef
    ldc.i4.s 0x02
    stsfld uint8 TildeStream::TypeDef
    ldc.i4.s 0x04
    stsfld uint8 TildeStream::Field
    ldc.i4.s 0x06
    stsfld uint8 TildeStream::MethodDef
    ldc.i4.s 0x08
    stsfld uint8 TildeStream::Param
    ldc.i4.s 0x09
    stsfld uint8 TildeStream::InterfaceImpl
    ldc.i4.s 0x0A
    stsfld uint8 TildeStream::MemberRef
    ldc.i4.s 0x0B
    stsfld uint8 TildeStream::Constant
    ldc.i4.s 0x0C
    stsfld uint8 TildeStream::CustomAttribute
    ldc.i4.s 0x0D
    stsfld uint8 TildeStream::FieldMarshal
    ldc.i4.s 0x0E
    stsfld uint8 TildeStream::DeclSecurity
    ldc.i4.s 0x0F
    stsfld uint8 TildeStream::ClassLayout
    ldc.i4.s 0x10
    stsfld uint8 TildeStream::FieldLayout
    ldc.i4.s 0x11
    stsfld uint8 TildeStream::StandAloneSig
    ldc.i4.s 0x12
    stsfld uint8 TildeStream::EventMap
    ldc.i4.s 0x14
    stsfld uint8 TildeStream::Event
    ldc.i4.s 0x15
    stsfld uint8 TildeStream::PropertyMap
    ldc.i4.s 0x17
    stsfld uint8 TildeStream::Property
    ldc.i4.s 0x18
    stsfld uint8 TildeStream::MethodSemantics
    ldc.i4.s 0x19
    stsfld uint8 TildeStream::MethodImpl
    ldc.i4.s 0x1A
    stsfld uint8 TildeStream::ModuleRef
    ldc.i4.s 0x1B
    stsfld uint8 TildeStream::TypeSpec
    ldc.i4.s 0x1C
    stsfld uint8 TildeStream::ImplMap
    ldc.i4.s 0x1D
    stsfld uint8 TildeStream::FieldRVA
    ldc.i4.s 0x20
    stsfld uint8 TildeStream::Assembly
    ldc.i4.s 0x21
    stsfld uint8 TildeStream::AssemblyProcessor
    ldc.i4.s 0x22
    stsfld uint8 TildeStream::AssemblyOS
    ldc.i4.s 0x23
    stsfld uint8 TildeStream::AssemblyRef
    ldc.i4.s 0x24
    stsfld uint8 TildeStream::AssemblyRefProcessor
    ldc.i4.s 0x25
    stsfld uint8 TildeStream::AssemblyRefOS
    ldc.i4.s 0x26
    stsfld uint8 TildeStream::File
    ldc.i4.s 0x27
    stsfld uint8 TildeStream::ExportedType
    ldc.i4.s 0x28
    stsfld uint8 TildeStream::ManifestResource
    ldc.i4.s 0x29
    stsfld uint8 TildeStream::NestedClass
    ldc.i4.s 0x2A
    stsfld uint8 TildeStream::GenericParam
    ldc.i4.s 0x2B
    stsfld uint8 TildeStream::MethodSpec
    ldc.i4.s 0x2C
    stsfld uint8 TildeStream::GenericParamConstraint
    ldc.i4.s 0x01
    stsfld uint8 TildeStream::TypeRef
    ldc.i4.s 0x02
    stsfld uint8 TildeStream::TypeDef
    ldc.i4.s 0x04
    stsfld uint8 TildeStream::Field
    ldc.i4.s 0x06
    stsfld uint8 TildeStream::MethodDef
    ldc.i4.s 0x08
    stsfld uint8 TildeStream::Param
    ldc.i4.s 0x09
    stsfld uint8 TildeStream::InterfaceImpl
    ldc.i4.s 0x0A
    stsfld uint8 TildeStream::MemberRef
    ldc.i4.s 0x0B
    stsfld uint8 TildeStream::Constant
    ldc.i4.s 0x0C
    stsfld uint8 TildeStream::CustomAttribute
    ldc.i4.s 0x0D
    stsfld uint8 TildeStream::FieldMarshal
    ldc.i4.s 0x0E
    stsfld uint8 TildeStream::DeclSecurity
    ldc.i4.s 0x0F
    stsfld uint8 TildeStream::ClassLayout
    ldc.i4.s 0x10
    stsfld uint8 TildeStream::FieldLayout
    ldc.i4.s 0x11
    stsfld uint8 TildeStream::StandAloneSig
    ldc.i4.s 0x12
    stsfld uint8 TildeStream::EventMap
    ldc.i4.s 0x14
    stsfld uint8 TildeStream::Event
    ldc.i4.s 0x15
    stsfld uint8 TildeStream::PropertyMap
    ldc.i4.s 0x17
    stsfld uint8 TildeStream::Property
    ldc.i4.s 0x18
    stsfld uint8 TildeStream::MethodSemantics
    ldc.i4.s 0x19
    stsfld uint8 TildeStream::MethodImpl
    ldc.i4.s 0x1A
    stsfld uint8 TildeStream::ModuleRef
    ldc.i4.s 0x1B
    stsfld uint8 TildeStream::TypeSpec
    ldc.i4.s 0x1C
    stsfld uint8 TildeStream::ImplMap
    ldc.i4.s 0x1D
    stsfld uint8 TildeStream::FieldRVA
    ldc.i4.s 0x20
    stsfld uint8 TildeStream::Assembly
    ldc.i4.s 0x21
    stsfld uint8 TildeStream::AssemblyProcessor
    ldc.i4.s 0x22
    stsfld uint8 TildeStream::AssemblyOS
    ldc.i4.s 0x23
    stsfld uint8 TildeStream::AssemblyRef
    ldc.i4.s 0x24
    stsfld uint8 TildeStream::AssemblyRefProcessor
    ldc.i4.s 0x25
    stsfld uint8 TildeStream::AssemblyRefOS
    ldc.i4.s 0x26
    stsfld uint8 TildeStream::File
    ldc.i4.s 0x27
    stsfld uint8 TildeStream::ExportedType
    ldc.i4.s 0x28
    stsfld uint8 TildeStream::ManifestResource
    ldc.i4.s 0x29
    stsfld uint8 TildeStream::NestedClass
    ldc.i4.s 0x2A
    stsfld uint8 TildeStream::GenericParam
    ldc.i4.s 0x2B
    stsfld uint8 TildeStream::MethodSpec
    ldc.i4.s 0x2C
    stsfld uint8 TildeStream::GenericParamConstraint

    ldc.i4 0x2D
    newarr MetaTable
    stsfld class MetaTable[] TildeStream::tables

    ldc.i4.0
    stloc i

    br.s LOOP_END

LOOP:
    ldsfld class MetaTable[] TildeStream::tables
    ldloc i
    newobj instance void MetaTable::.ctor()
    stelem.ref

    ldloc i
    ldc.i4.1
    add
    stloc i

LOOP_END:
    ldloc i
    ldsfld class MetaTable[] TildeStream::tables
    ldlen
    conv.i4
    blt.s LOOP
  
    ret
  }

  .method public static void Write() {
    call int64 C::Pos()
    stsfld int64 TildeStream::fileStart

    call void TildeStream::WriteHeader()
    call void TildeStream::WriteRowCounts()
    call void TildeStream::WriteTables()

    call int64 C::Pos()
    stsfld int64 TildeStream::fileEnd

    ret
  }

  .method private static void WriteHeader() {
    ldc.i4.0 // Reserved
    call void C::Write(int32)

    ldc.i4.2 // MajorVersion
    call void C::Write(int8)
    ldc.i4.0 // MinorVersion
    call void C::Write(int8)

    ldc.i4.0 // HeapSizes
    call void C::Write(int8)

    ldc.i4.1 // Reserved
    call void C::Write(int8)

    call int64 TildeStream::ValidVector()
    call void C::Write(int64)

    ldc.i8 0 // Sorted 
    call void C::Write(int64)

    ret
  }

  .method private static int64 ValidVector() {
    .locals init (int64 mask, int32 i)

    ldc.i8 0
    stloc mask
    ldc.i4.0
    stloc i
    
    br.s LOOP_END

LOOP_BODY:
    ldsfld class MetaTable[] TildeStream::tables
    ldloc i
    ldelem.ref
    callvirt instance int32 MetaTable::GetCount()
    brfalse.s LOOP_INCREMENT

    ldloc mask
    ldc.i8 1
    ldloc i
    shl
    or
    stloc mask

LOOP_INCREMENT:
    ldloc i
    ldc.i4.1
    add
    stloc i

LOOP_END:
    ldloc i
    ldsfld class MetaTable[] TildeStream::tables
    ldlen
    conv.i4
    blt LOOP_BODY

    ldloc mask
    ret
  }

  .method private static void WriteRowCounts() {
    .locals init (int32 i, int32 len)

    br.s LOOP_END

LOOP_BODY:
    ldsfld class MetaTable[] TildeStream::tables
    ldloc i
    ldelem.ref
    callvirt instance int32 MetaTable::GetCount()
    stloc len

    ldloc len
    brfalse.s LOOP_INCREMENT

    ldloc len
    call void C::Write(int32)

LOOP_INCREMENT:
    ldloc i
    ldc.i4.1
    add
    stloc i

LOOP_END:
    ldloc i
    ldsfld class MetaTable[] TildeStream::tables
    ldlen
    conv.i4
    blt LOOP_BODY

    ret
  }

  .method private static void WriteTables() {
    .locals init (int32 i)

    br.s LOOP_END

LOOP_BODY:
    ldsfld class MetaTable[] TildeStream::tables
    ldloc i
    ldelem.ref
    callvirt instance void MetaTable::Write()

    ldloc i
    ldc.i4.1
    add
    stloc i

LOOP_END:
    ldloc i
    ldsfld class MetaTable[] TildeStream::tables
    ldlen
    conv.i4
    blt LOOP_BODY

    ret
  }

  .method private static class Token AddRow(uint8 table, uint8[] data) {
    .locals init (int32 i)
    ldsfld class MetaTable[] TildeStream::tables
    ldarg table
    ldelem.ref
    ldarg data
    callvirt instance int32 MetaTable::Add(uint8[])
    stloc i

    ldarg table
    ldloc i
    ldc.i4.1
    add // Tokens are all 1-based indices
    newobj instance void Token::.ctor(uint8, uint16)
    ret
  }

  // NOTE! in II.22 many of the other tables (MethodImpl, NestedClass, etc) are required to be sorted by primary key... that might be a pain... one idea: take two passes to build the metadata, sorting after the first pass -- but no, after sorting all the internal indices will be wrong...? Need to store references that can mutate with the index, instead of returning ints.

  .method public static class Token AddModule(string name, int16 mvidIndex) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldc.i4 0x00 // Generation
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg mvidIndex
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldc.i4.0 // EncId
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldc.i4.0 // EncBaseId
    call instance void RowBuilder::Add(int16)

    ldsfld uint8 TildeStream::Module
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call class Token TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static class Token AddTypeRef(class Token scope, string name, string ns) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg scope
    call uint16 CodedIndex::ResolutionScope(class Token)
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg ns
    call instance void RowBuilder::String(string)

    ldsfld uint8 TildeStream::TypeRef
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call class Token TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static class Token AddTypeDef(uint32 flagz, string name, string ns, class Token extendz, uint16 fieldList, uint16 methodList) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg flagz
    call instance void RowBuilder::Add(uint32)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg ns
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg extendz
    call uint16 CodedIndex::TypeDefOrRef(class Token)
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg fieldList
    call instance void RowBuilder::Add(int16) 

    ldloc row
    ldarg methodList
    call instance void RowBuilder::Add(int16) // TODO MethodDefRun based on MethodDef[0]

    ldsfld uint8 TildeStream::TypeDef
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call class Token TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static class Token AddMethodDef(uint32 rva, uint16 implFlags, uint16 flagz, string name, uint16 sig, uint16 paramList) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg rva
    call instance void RowBuilder::Add(uint32)

    ldloc row
    ldarg implFlags
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg flagz
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg sig
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg paramList
    call instance void RowBuilder::Add(int16)

    ldsfld uint8 TildeStream::MethodDef
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call class Token TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static class Token AddMemberRef(class Token clazz, string name, uint16 sig) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg clazz
    call uint16 CodedIndex::MemberRefParent(class Token)
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg sig
    call instance void RowBuilder::Add(int16)

    ldsfld uint8 TildeStream::MemberRef
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call class Token TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static class Token AddTypeSpec(uint16 sig) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg sig
    call instance void RowBuilder::Add(int16)

    ldsfld uint8 TildeStream::TypeSpec
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call class Token TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static class Token AddAssembly(uint32 hashAlgId, uint32 flagz, uint16 publicKey, string name, string culture) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg hashAlgId
    call instance void RowBuilder::Add(uint32)

    ldloc row
    ldc.i4 0x00 // MajorVersion
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // MinorVersion
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // BuildNumber
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // RevisionNumber
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg flagz
    call instance void RowBuilder::Add(uint32)

    ldloc row
    ldarg publicKey
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg culture
    call instance void RowBuilder::String(string)

    ldsfld uint8 TildeStream::Assembly
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call class Token TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static class Token AddAssemblyRef(uint32 flagz, uint16 publicKey, string name, string culture, uint16 hashValue) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldc.i4 0x00 // MajorVersion
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // MinorVersion
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // BuildNumber
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // RevisionNumber
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg flagz
    call instance void RowBuilder::Add(uint32)

    ldloc row
    ldarg publicKey
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg culture
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg hashValue
    call instance void RowBuilder::Add(int16)

    ldsfld uint8 TildeStream::AssemblyRef
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call class Token TildeStream::AddRow(uint8, uint8[])
    
    ret
  }
}

.class sealed RowBuilder {
  .field private class [mscorlib]System.IO.MemoryStream ms
  .field private class [mscorlib]System.IO.BinaryWriter writer

  .method public hidebysig specialname rtspecialname instance void .ctor () {
    ldarg.0
    call instance void [mscorlib]System.Object::.ctor()

    ldarg.0
    newobj instance void [mscorlib]System.IO.MemoryStream::.ctor()
    stfld class [mscorlib]System.IO.MemoryStream RowBuilder::ms
    
    ldarg.0
    ldarg.0
    ldfld class [mscorlib]System.IO.MemoryStream RowBuilder::ms
    newobj instance void [mscorlib]System.IO.BinaryWriter::.ctor(class [mscorlib]System.IO.Stream)
    stfld class [mscorlib]System.IO.BinaryWriter RowBuilder::writer

    ret
  }

  .method public instance void Add(int16) {
    ldarg.0
    ldfld class [mscorlib]System.IO.BinaryWriter RowBuilder::writer
    ldarg.1
    callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(int16)
    ret
  }

  .method public instance void Add(uint32) {
    ldarg.0
    ldfld class [mscorlib]System.IO.BinaryWriter RowBuilder::writer
    ldarg.1
    callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(uint32)
    ret
  }

  .method public instance void String(string) {
    ldarg.0
    ldarg.1
    call int32 StringHeap::Add(string)
    call instance void RowBuilder::Add(int16)
    ret
  }

  .method public instance uint8[] Build() {
    ldarg.0
    ldfld class [mscorlib]System.IO.MemoryStream RowBuilder::ms
    callvirt instance uint8[] [mscorlib]System.IO.MemoryStream::ToArray()

    ldarg.0
    ldfld class [mscorlib]System.IO.BinaryWriter RowBuilder::writer
    callvirt instance void [mscorlib]System.IDisposable::Dispose()

    ret
  }
}

.class public sealed MetaTable {
  .field class [mscorlib]System.Collections.Generic.List`1<uint8[]> data
  .field class [mscorlib]System.Collections.Generic.Dictionary`2<string, int32> cache

  .method public hidebysig specialname rtspecialname instance void .ctor () {
    ldarg.0
    call instance void [mscorlib]System.Object::.ctor()

    ldarg.0
    newobj instance void class [mscorlib]System.Collections.Generic.List`1<uint8[]>::.ctor()
    stfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaTable::data

    ldarg.0
    newobj instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::.ctor()
    stfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> MetaTable::cache
    
    ret
  }

  .method public instance int32 Add(uint8[] val) {
    .locals init (string key, int32 index)

    ldarg val
    call string [mscorlib]System.Convert::ToBase64String(uint8[])
    stloc key

    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> MetaTable::cache
    ldloc key
    callvirt instance bool class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::ContainsKey(!0)
    brfalse.s NOT_FOUND

    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> MetaTable::cache
    ldloc key
    callvirt instance !1 class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::get_Item(!0)
    ret

NOT_FOUND:
    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaTable::data
    callvirt instance int32 class [mscorlib]System.Collections.Generic.List`1<uint8[]>::get_Count()
    stloc index

    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> MetaTable::cache
    ldloc key
    ldloc index
    callvirt instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::Add(!0, !1)

    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaTable::data
    ldarg val
    callvirt instance void class [mscorlib]System.Collections.Generic.List`1<uint8[]>::Add(!0)

    ldloc index
    ret
  }


  .method public instance int32 GetCount() {
    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaTable::data
    callvirt instance int32 class [mscorlib]System.Collections.Generic.List`1<uint8[]>::get_Count()
    ret
  }

  .method public instance void Write() {
    .locals init (int32 i)

    br.s LOOP_START

LOOP_BODY:
    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaTable::data
    ldloc i
    callvirt instance !0 class [mscorlib]System.Collections.Generic.List`1<uint8[]>::get_Item(int32)
    call void C::Write(uint8[])

    ldloc i
    ldc.i4.1
    add
    stloc i

LOOP_START:
    ldloc i
    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaTable::data
    callvirt instance int32 class [mscorlib]System.Collections.Generic.List`1<uint8[]>::get_Count()
    blt LOOP_BODY

    ret
  }
}

.class public sealed Token { // III.1.9 Metadata Token 
  .field private uint8 table;
  .field private uint16 row; // 1-based, should really be 24-bit but not sure how to write that into byte stream

  .method public hidebysig specialname rtspecialname instance void .ctor (uint8, uint16) {
    ldarg.0
    call instance void [mscorlib]System.Object::.ctor()

    ldarg.0
    ldarg.1
    stfld uint8 Token::table

    ldarg.0
    ldarg.2
    stfld uint16 Token::row

    ret
  }

  .method public instance uint8 get_table() {
    ldarg.0
    ldfld uint8 Token::table
    ret
  }

  .method public instance uint16 get_row() {
    ldarg.0
    ldfld uint16 Token::row
    ret
  }

  .method public instance void Write() {
    ldarg.0
    ldfld uint16 Token::row
    call void C::Write(int16)
    ldc.i4.0
    call void C::Write(uint8)
    
    ldarg.0
    ldfld uint8 Token::table
    call void C::Write(uint8)

    ret
  }
}

.class public abstract sealed CodedIndex { // II.24.2.6
  .field static class CodedIndexBuilder typeDefOrRef
  .field static class CodedIndexBuilder memberRefParent
  .field static class CodedIndexBuilder resolutionScope

  .method static hidebysig specialname rtspecialname default void .cctor() {
    ldc.i4.2
    newobj instance void CodedIndexBuilder::.ctor(uint8)
    dup
    ldsfld uint8 TildeStream::TypeDef
    call instance void CodedIndexBuilder::Add(uint8)
    dup
    ldsfld uint8 TildeStream::TypeRef
    call instance void CodedIndexBuilder::Add(uint8)
    dup
    ldsfld uint8 TildeStream::TypeSpec
    call instance void CodedIndexBuilder::Add(uint8)
    stsfld class CodedIndexBuilder CodedIndex::typeDefOrRef

    ldc.i4.3
    newobj instance void CodedIndexBuilder::.ctor(uint8)
    dup
    ldsfld uint8 TildeStream::TypeDef
    call instance void CodedIndexBuilder::Add(uint8)
    dup
    ldsfld uint8 TildeStream::TypeRef
    call instance void CodedIndexBuilder::Add(uint8)
    dup
    ldsfld uint8 TildeStream::ModuleRef
    call instance void CodedIndexBuilder::Add(uint8)
    dup
    ldsfld uint8 TildeStream::MethodDef
    call instance void CodedIndexBuilder::Add(uint8)
    dup
    ldsfld uint8 TildeStream::TypeSpec
    call instance void CodedIndexBuilder::Add(uint8)
    stsfld class CodedIndexBuilder CodedIndex::memberRefParent

    ldc.i4.2
    newobj instance void CodedIndexBuilder::.ctor(uint8)
    dup
    ldsfld uint8 TildeStream::Module
    call instance void CodedIndexBuilder::Add(uint8)
    dup
    ldsfld uint8 TildeStream::ModuleRef
    call instance void CodedIndexBuilder::Add(uint8)
    dup
    ldsfld uint8 TildeStream::AssemblyRef
    call instance void CodedIndexBuilder::Add(uint8)
    dup
    ldsfld uint8 TildeStream::TypeRef
    call instance void CodedIndexBuilder::Add(uint8)
    stsfld class CodedIndexBuilder CodedIndex::resolutionScope

    ret
  }

  .method public static uint16 TypeDefOrRef(class Token) {
    ldsfld class CodedIndexBuilder CodedIndex::typeDefOrRef
    ldarg.0
    call instance uint16 CodedIndexBuilder::Get(class Token)
    ret
  }

  .method public static uint16 MemberRefParent(class Token) {
    ldsfld class CodedIndexBuilder CodedIndex::memberRefParent
    ldarg.0
    call instance uint16 CodedIndexBuilder::Get(class Token)
    ret
  }

  .method public static uint16 ResolutionScope(class Token) {
    ldsfld class CodedIndexBuilder CodedIndex::resolutionScope
    ldarg.0
    call instance uint16 CodedIndexBuilder::Get(class Token)
    ret
  }
}

.class sealed CodedIndexBuilder {
  .field class [mscorlib]System.Collections.Generic.Dictionary`2<uint8,uint8> tags
  .field uint8 tagBits

  .method public hidebysig specialname rtspecialname instance void .ctor (uint8) {
    ldarg.0
    call instance void [mscorlib]System.Object::.ctor()

    ldarg.0
    newobj instance void class [mscorlib]System.Collections.Generic.Dictionary`2<uint8,uint8>::.ctor()
    stfld class [mscorlib]System.Collections.Generic.Dictionary`2<uint8,uint8> CodedIndexBuilder::tags

    ldarg.0
    ldarg.1
    stfld uint8 CodedIndexBuilder::tagBits

    ret
  }

  .method public instance void Add(uint8) {
    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.Dictionary`2<uint8,uint8> CodedIndexBuilder::tags
    ldarg.1

    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.Dictionary`2<uint8,uint8> CodedIndexBuilder::tags
    callvirt instance int32 class [mscorlib]System.Collections.Generic.Dictionary`2<uint8,uint8>::get_Count()
    conv.u1
    
    callvirt instance void class [mscorlib]System.Collections.Generic.Dictionary`2<uint8,uint8>::Add(!0, !1)
    ret
  }

  .method public instance uint16 Get(class Token) {
    ldarg.1
    brtrue.s NOT_NULL
    ldc.i4.0
    ret

NOT_NULL:
    ldarg.1
    callvirt instance uint16 Token::get_row()
    ldarg.0
    ldfld uint8 CodedIndexBuilder::tagBits
    shl

    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.Dictionary`2<uint8,uint8> CodedIndexBuilder::tags
    ldarg.1
    callvirt instance uint8 Token::get_table()
    callvirt instance !1 class [mscorlib]System.Collections.Generic.Dictionary`2<uint8,uint8>::get_Item(!0)
    or
    ret
  }
}
