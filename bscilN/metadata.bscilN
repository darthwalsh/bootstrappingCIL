.class abstract sealed CLIHeader { // II.25.3.3
  .method public static void Write() {
    ldc.i4 0x48
    call void C::Write(int32)

    ldc.i4.2
    call void C::Write(int16)
    ldc.i4.0
    call void C::Write(int16)

    ldc.i4 0x2068 // TODO(link) MetadataRoot RVA
    call void C::Write(int32)
    
    // Metadata Size
    ldsfld int64 BlobHeap::fileEnd
    ldsfld int64 MetadataRoot::fileStart
    sub
    conv.i4
    call void C::Write(int32)

    ldc.i4.1
    call void C::Write(int32)
    ldc.i4 0x6000001 // TODO(link) EntryPointToken MethodDef table first row
    call void C::Write(int32)

    ldc.i4 0x30 // Resources StrongNameSignature CodeManagerTable VTableFixups
    newarr uint8
    call void C::Write(uint8[])

    ret
  }
}

.class abstract sealed MetadataRoot { // II.24.2.1
  .field public static int64 fileStart

  .method public static void Write() {
    call int64 C::Pos()
    stsfld int64 MetadataRoot::fileStart

    ldstr "BSJB"
    call void C::WriteUTF8(string)

    ldc.i4.1
    call void C::Write(int16)
    ldc.i4.1
    call void C::Write(int16)

    ldc.i4.0
    call void C::Write(int32)

    ldc.i4 12 // length of following string, with null terminal, to 4-byte alignment
    call void C::Write(int32)

    ldstr "v4.0.30319"
    call void C::WriteUTF8(string)
    ldc.i4.0
    call void C::Write(uint8)
    ldc.i4.4
    call void C::ZeroUntilMultiple(uint32)

    ldc.i4.0
    call void C::Write(int16)

    call void StreamHeader::Write()

    ret
  }
}

.class abstract sealed TildeStream { // II.24.2.6
  .field public static int64 fileStart
  .field public static int64 fileEnd

  .field private static class MetaRow[] tables

  .method static hidebysig specialname rtspecialname default void .cctor() {
    .locals init (int32 i)

    ldc.i4 0x2D
    newarr MetaRow
    stsfld class MetaRow[] TildeStream::tables

    ldc.i4.0
    stloc i

    br.s LOOP_END

LOOP:
    ldsfld class MetaRow[] TildeStream::tables
    ldloc i
    newobj instance void MetaRow::.ctor()
    stelem.ref

    ldloc i
    ldc.i4.1
    add
    stloc i

LOOP_END:
    ldloc i
    ldsfld class MetaRow[] TildeStream::tables
    ldlen
    conv.i4
    blt.s LOOP
  
    ret
  }

  .method public static void Write() {
    call int64 C::Pos()
    stsfld int64 TildeStream::fileStart

    call void TildeStream::WriteHeader()
    call void TildeStream::WriteRowCounts()
    call void TildeStream::WriteTables()

    call int64 C::Pos()
    stsfld int64 TildeStream::fileEnd

    ret
  }

  .method private static void WriteHeader() {
    ldc.i4.0 // Reserved
    call void C::Write(int32)

    ldc.i4.2 // MajorVersion
    call void C::Write(int8)
    ldc.i4.0 // MinorVersion
    call void C::Write(int8)

    ldc.i4.0 // HeapSizes
    call void C::Write(int8)

    ldc.i4.1 // Reserved
    call void C::Write(int8)

// TODO build up this bit vector of valid tables based on seeded rows
ldc.i4.s 0x47
call void C::Write(uint8)
ldc.i4.s 0x04
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x08
call void C::Write(uint8)
ldc.i4.s 0x09
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)

    ldc.i8 0 // Sorted 
    call void C::Write(int64)

    ret
  }

  .method private static void WriteRowCounts() {
    // TODO write based on valid tables based on seeded rows
    ldc.i4 1
    call void C::Write(int32)

    ldc.i4 4
    call void C::Write(int32)

    ldc.i4 2
    call void C::Write(int32)

    ldc.i4 1
    call void C::Write(int32)

    ldc.i4 2
    call void C::Write(int32)

    ldc.i4 1
    call void C::Write(int32)

    ldc.i4 1
    call void C::Write(int32)

    ldc.i4 1
    call void C::Write(int32)

    ret
  }

  .method private static void WriteTables() {
    .locals init (int32 i)

    br.s LOOP_END

LOOP_BODY:
    ldsfld class MetaRow[] TildeStream::tables
    ldloc i
    ldelem.ref
    callvirt instance void MetaRow::Write()

    ldloc i
    ldc.i4.1
    add
    stloc i

LOOP_END:
    ldloc i
    ldsfld class MetaRow[] TildeStream::tables
    ldlen
    conv.i4
    blt LOOP_BODY

    ret
  }

  .method private static void AddRow(uint8 table, uint8[] data) {
    ldsfld class MetaRow[] TildeStream::tables
    ldarg table
    ldelem.ref
    ldarg data
    callvirt instance int32 MetaRow::Add(uint8[])
    pop // will need to return metadata token with this

    ret
  }

  // TODO return a table index
  .method public static void Module(string name, int16 mvidIndex) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldc.i4 0x00 // Generation
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg mvidIndex
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldc.i4.0 // EncId
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldc.i4.0 // EncBaseId
    call instance void RowBuilder::Add(int16)

    ldc.i4 0x00 // Module
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call void TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static void TypeRef(uint16 scope, string name, string ns) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg scope
    call instance void RowBuilder::Add(int16) // TODO coded index ResolutionScope

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg ns
    call instance void RowBuilder::String(string)

    ldc.i4 0x01 // TypeRef
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call void TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static void TypeDef(uint32 flagz, string name, string ns, uint16 extendz, uint16 fieldList, uint16 methodList) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg flagz
    call instance void RowBuilder::Add(uint32)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg ns
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg extendz
    call instance void RowBuilder::Add(int16)  // TODO coded index CodedIndex.TypeDefOrRef

    ldloc row
    ldarg fieldList
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg methodList
    call instance void RowBuilder::Add(int16)

    ldc.i4 0x02 // TypeDef
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call void TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static void MethodDef(uint32 rva, uint16 implFlags, uint16 flagz, string name, uint16 sig, uint16 paramList) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg rva
    call instance void RowBuilder::Add(uint32)

    ldloc row
    ldarg implFlags
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg flagz
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg sig
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg paramList
    call instance void RowBuilder::Add(int16)

    ldc.i4 0x06 // MethodDef
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call void TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static void MemberRef(uint16 clazz, string name, uint16 sig) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg clazz
    call instance void RowBuilder::Add(int16) // TODO coded index MemberRefParent

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg sig
    call instance void RowBuilder::Add(int16)

    ldc.i4 0x0A // MemberRef
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call void TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static void TypeSepc(uint16 sig) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg sig
    call instance void RowBuilder::Add(int16)

    ldc.i4 0x1B // TypeSpec
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call void TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static void Assembly(uint32 hashAlgId, uint32 flagz, uint16 publicKey, string name, string culture) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldarg hashAlgId
    call instance void RowBuilder::Add(uint32)

    ldloc row
    ldc.i4 0x00 // MajorVersion
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // MinorVersion
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // BuildNumber
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // RevisionNumber
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg flagz
    call instance void RowBuilder::Add(uint32)

    ldloc row
    ldarg publicKey
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg culture
    call instance void RowBuilder::String(string)

    ldc.i4 0x20 // Assembly
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call void TildeStream::AddRow(uint8, uint8[])
    
    ret
  }

  .method public static void AssemblyRef(uint32 flagz, uint16 publicKey, string name, string culture, uint16 hashValue) {
    .locals init (class RowBuilder row)

    newobj instance void RowBuilder::.ctor()
    stloc row

    ldloc row
    ldc.i4 0x00 // MajorVersion
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // MinorVersion
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // BuildNumber
    call instance void RowBuilder::Add(int16)
    ldloc row
    ldc.i4 0x00 // RevisionNumber
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg flagz
    call instance void RowBuilder::Add(uint32)

    ldloc row
    ldarg publicKey
    call instance void RowBuilder::Add(int16)

    ldloc row
    ldarg name
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg culture
    call instance void RowBuilder::String(string)

    ldloc row
    ldarg hashValue
    call instance void RowBuilder::Add(int16)

    ldc.i4 0x23 // AssemblyRef
    ldloc row
    call instance uint8[] RowBuilder::Build()
    call void TildeStream::AddRow(uint8, uint8[])
    
    ret
  }
}

.class sealed RowBuilder {
  .field private class [mscorlib]System.IO.MemoryStream ms
  .field private class [mscorlib]System.IO.BinaryWriter writer

  .method public hidebysig specialname rtspecialname instance void .ctor () {
    ldarg.0
    call instance void [mscorlib]System.Object::.ctor()

    ldarg.0
    newobj instance void [mscorlib]System.IO.MemoryStream::.ctor()
    stfld class [mscorlib]System.IO.MemoryStream RowBuilder::ms
    
    ldarg.0
    ldarg.0
    ldfld class [mscorlib]System.IO.MemoryStream RowBuilder::ms
    newobj instance void [mscorlib]System.IO.BinaryWriter::.ctor(class [mscorlib]System.IO.Stream)
    stfld class [mscorlib]System.IO.BinaryWriter RowBuilder::writer

    ret
  }

  .method public instance void Add(int16) {
    ldarg.0
    ldfld class [mscorlib]System.IO.BinaryWriter RowBuilder::writer
    ldarg.1
    callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(int16)
    ret
  }

  .method public instance void Add(uint32) {
    ldarg.0
    ldfld class [mscorlib]System.IO.BinaryWriter RowBuilder::writer
    ldarg.1
    callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(uint32)
    ret
  }

  .method public instance void String(string) {
    ldarg.0
    ldarg.1
    call int32 StringHeap::Add(string)
    call instance void RowBuilder::Add(int16)
    ret
  }

  .method public instance uint8[] Build() {
    ldarg.0
    ldfld class [mscorlib]System.IO.MemoryStream RowBuilder::ms
    callvirt instance uint8[] [mscorlib]System.IO.MemoryStream::ToArray()

    ldarg.0
    ldfld class [mscorlib]System.IO.BinaryWriter RowBuilder::writer
    callvirt instance void [mscorlib]System.IDisposable::Dispose()

    ret
  }
}

.class public sealed MetaRow {
  .field class [mscorlib]System.Collections.Generic.List`1<uint8[]> data
  .field class [mscorlib]System.Collections.Generic.Dictionary`2<string, int32> cache

  .method public hidebysig specialname rtspecialname instance void .ctor () {
    ldarg.0
    call instance void [mscorlib]System.Object::.ctor()

    ldarg.0
    newobj instance void class [mscorlib]System.Collections.Generic.List`1<uint8[]>::.ctor()
    stfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaRow::data

    ldarg.0
    newobj instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::.ctor()
    stfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> MetaRow::cache
    
    ret
  }

  .method public instance int32 Add(uint8[] val) {
    // TODO check cache. Can validate by seeding something twice
    .locals init (int32 index)

    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaRow::data
    callvirt instance int32 class [mscorlib]System.Collections.Generic.List`1<uint8[]>::get_Count()
    stloc index

    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaRow::data
    ldarg val
    callvirt instance void class [mscorlib]System.Collections.Generic.List`1<uint8[]>::Add(!0)

    ldloc index
    ret
  }


  .method public instance int32 GetCount() {
    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaRow::data
    callvirt instance int32 class [mscorlib]System.Collections.Generic.List`1<uint8[]>::get_Count()
    ret
  }

  .method public instance void Write() {
    .locals init (int32 i)

    br.s LOOP_START

LOOP_BODY:
    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaRow::data
    ldloc i
    callvirt instance !0 class [mscorlib]System.Collections.Generic.List`1<uint8[]>::get_Item(int32)
    call void C::Write(uint8[])

    ldloc i
    ldc.i4.1
    add
    stloc i

LOOP_START:
    ldloc i
    ldarg.0
    ldfld class [mscorlib]System.Collections.Generic.List`1<uint8[]> MetaRow::data
    callvirt instance int32 class [mscorlib]System.Collections.Generic.List`1<uint8[]>::get_Count()
    blt LOOP_BODY

    ret
  }
}
