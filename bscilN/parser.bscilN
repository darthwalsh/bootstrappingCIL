.class abstract sealed Reader {
  .field static [mscorlib]System.IO.Stream input
  .method static void Init([mscorlib]System.IO.Stream) {
    ldarg.0
    stsfld [mscorlib]System.IO.Stream Reader::input
    ret
  }

  .method static char Read() {
    ldsfld [mscorlib]System.IO.Stream Reader::input
    callvirt instance int32 [mscorlib]System.IO.Stream::ReadByte()
    conv.u2
    ret
  }

  .method static void ReadExpected(string) { // TODO remove?
    ldarg.0
    call bool Reader::TryRead(string)
    brfalse.s ERROR
    ret

ERROR:
    ldarg.0
    newobj instance void [mscorlib]System.InvalidOperationException::.ctor(string)
    throw
  }

  .method static string ReadOfAny(string) {
    .locals init ([mscorlib]System.Text.StringBuilder sb, char c, int64 pos)
    newobj void [mscorlib]System.Text.StringBuilder::.ctor()
    stloc.s sb

LOOP_START:
    ldsfld [mscorlib]System.IO.Stream Reader::input
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stloc.s pos

    ldarg.0
    call char Reader::Read()
    stloc.s c
    ldloc.s c
    call instance bool string::Contains(char)
    brfalse.s DONE

    ldloc.s sb
    ldloc.s c
    call instance [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(char)
    pop
    br.s LOOP_START
    
DONE:
    ldsfld [mscorlib]System.IO.Stream Reader::input
    ldloc.s pos
    callvirt instance void class [mscorlib]System.IO.Stream::set_Position(int64)

    ldloc.s sb
    callvirt string object::ToString()
    call void Reader::ConsumeWhiteSpaceComments()
    ret
  }

  .method static bool TryRead(string) {
    .locals init ([mscorlib]System.Text.StringBuilder sb, int64 pos)
    newobj void [mscorlib]System.Text.StringBuilder::.ctor()
    stloc.s sb

    ldsfld [mscorlib]System.IO.Stream Reader::input
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stloc.s pos

LOOP_START:
    ldarg.0
    call instance int32 string::get_Length()
    ldloc.s sb
    call instance int32 [mscorlib]System.Text.StringBuilder::get_Length()
    beq.s LOOP_END

    ldloc.s sb
    call char Reader::Read()
    call instance [mscorlib]System.Text.StringBuilder [mscorlib]System.Text.StringBuilder::Append(char)
    br.s LOOP_START

LOOP_END:

    ldloc.s sb
    callvirt string object::ToString()
    ldarg.0
    call bool string::op_Equality(string, string)
    dup

    ////////////////////////////////////////////////////////////////////////////////
    // ldstr "TryRead() >>"
    // call void [mscorlib]System.Console::Write(string)
    // ldloc.s sb
    // call void [mscorlib]System.Console::Write(object)
    // ldstr "=="
    // call void [mscorlib]System.Console::Write(object)
    // ldarg.0
    // call void [mscorlib]System.Console::Write(object)
    // ldstr "<<"
    // call void [mscorlib]System.Console::WriteLine(string)
    ////////////////////////////////////////////////////////////////////////////////

    brtrue.s DONE

    ldsfld [mscorlib]System.IO.Stream Reader::input
    ldloc.s pos
    callvirt instance void class [mscorlib]System.IO.Stream::set_Position(int64)

DONE:
    call void Reader::ConsumeWhiteSpaceComments()
    ret
  }

  .method static void ConsumeWhiteSpaceComments() {
    .locals init (int64 pos)
LOOP_START:
    ldsfld [mscorlib]System.IO.Stream Reader::input
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stloc.s pos

    call char Reader::Read()
    
    ////////////////////////////////////////////////////////////////////////////////
    // dup
    // ldstr "WHITESPACE?"
    // call void [mscorlib]System.Console::Write(string)
    // call void [mscorlib]System.Console::WriteLine(char)
    ////////////////////////////////////////////////////////////////////////////////

    call bool char::IsWhiteSpace(char)
    brtrue.s LOOP_START

    // TODO consume // single line comments and /* multi line comments */

    ldsfld [mscorlib]System.IO.Stream Reader::input
    ldloc.s pos
    callvirt instance void class [mscorlib]System.IO.Stream::set_Position(int64)
    ret
  }
}

.class abstract sealed Parser {
  .method static bool Decl() {
    ldstr ".class"
    call bool Reader::TryRead(string)
    brfalse.s ASSEMBLY

    call void Parser::Class()
    ldc.i4.1
    ret

ASSEMBLY:
    ldstr ".assembly"
    call bool Reader::TryRead(string)
    brfalse.s FAILED

    call void Parser::Assembly()
    ldc.i4.1
    ret

FAILED:
    ldc.i4.0
    ret
  }

  .method static string DottedName() {
    ldstr "abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    call string Reader::ReadOfAny(string)

    ldstr ".abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    call string Reader::ReadOfAny(string)
    call string string::Concat(string, string)

    ret
    // TODO SQSTRING
  }

  .method static void Decls() {
  LOOP:
    call bool Parser::Decl()
    brtrue.s LOOP
    ret
  }

  .method static void Class() {
    call string Parser::DottedName()

    ldstr "FOUND .class named: "
    call void [mscorlib]System.Console::Write(string)
    call void [mscorlib]System.Console::WriteLine(string)

    // TODO extendsClause implClause
  

    ldstr "{"
    call void Reader::ReadExpected(string)

    // TODO classDecls
    
    ret
  }


  .method static void Assembly() {
    //TODO extern means assemblyRef

    //TODO asmAttr

    call string Parser::DottedName()

    ldstr "FOUND .assembly named: "
    call void [mscorlib]System.Console::Write(string)
    call void [mscorlib]System.Console::WriteLine(string)


    ldstr "{"
    call void Reader::ReadExpected(string)

    // TODO assemblyDecls or assemblyRefDecls

    ldstr "}"
    call void Reader::ReadExpected(string)
    
    ret
  }

  .method public static void Parse() {
    call void Parser::Decls()
    // call void Parser::ParseTop() // TODO this should loop until EOF


    ldstr "<><><><>"
    call void [mscorlib]System.Console::WriteLine(string)
    ret
  }
}
