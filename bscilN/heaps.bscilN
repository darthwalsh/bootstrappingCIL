.class abstract sealed MetadataRoot {
  .field public static int64 fileStart
}

.class StreamHeader {
  // the object model would have offset and size, but they are calculated
  .field public int64 fileStart
  .field public int64 fileEnd
  .field public string name

  .method public hidebysig specialname rtspecialname instance void .ctor (
    int64 fileStart,
    int64 fileEnd,
    string name
  ) {
    ldarg.0
    call instance void [mscorlib]System.Object::.ctor()

    ldarg.0
    ldarg.s fileStart
    stfld int64 StreamHeader::fileStart

    ldarg.0
    ldarg.s fileEnd
    stfld int64 StreamHeader::fileEnd

    ldarg.0
    ldarg.s name
    stfld string StreamHeader::name
    ret
  }

  .method static class StreamHeader TildeStream() {
    ldsfld int64 TildeStream::fileStart
    ldsfld int64 TildeStream::fileEnd
    ldstr "#~"
    newobj instance void StreamHeader::.ctor(int64, int64, string)
    ret
  }

  .method static class StreamHeader StringHeap() {
    ldsfld int64 StringHeap::fileStart
    ldsfld int64 StringHeap::fileEnd
    ldstr "#Strings"
    newobj instance void StreamHeader::.ctor(int64, int64, string)
    ret
  }

  .method static class StreamHeader UserStringHeap() {
    ldsfld int64 UserStringHeap::fileStart
    ldsfld int64 UserStringHeap::fileEnd
    ldstr "#US"
    newobj instance void StreamHeader::.ctor(int64, int64, string)
    ret
  }

  .method static class StreamHeader GuidHeap() {
    ldsfld int64 GuidHeap::fileStart
    ldsfld int64 GuidHeap::fileEnd
    ldstr "#GUID"
    newobj instance void StreamHeader::.ctor(int64, int64, string)
    ret
  }

  .method public static void Write(class [mscorlib]System.IO.Stream) {
    // write 0x0005
    ldarg.0
    ldc.i4.5
    callvirt instance void [mscorlib]System.IO.Stream::WriteByte(uint8)
    ldarg.0
    ldc.i4.0
    callvirt instance void [mscorlib]System.IO.Stream::WriteByte(uint8)

    // TODO for all 5 headers
    call class StreamHeader StreamHeader::TildeStream()
    ldarg.0
    call instance void StreamHeader::WriteStreamHeader(class [mscorlib]System.IO.Stream)

    call class StreamHeader StreamHeader::StringHeap()
    ldarg.0
    call instance void StreamHeader::WriteStreamHeader(class [mscorlib]System.IO.Stream)

    call class StreamHeader StreamHeader::UserStringHeap()
    ldarg.0
    call instance void StreamHeader::WriteStreamHeader(class [mscorlib]System.IO.Stream)

    call class StreamHeader StreamHeader::GuidHeap()
    ldarg.0
    call instance void StreamHeader::WriteStreamHeader(class [mscorlib]System.IO.Stream)

    ret
  }

  .method void WriteStreamHeader(class [mscorlib]System.IO.Stream) {
    .locals init (class [mscorlib]System.IO.BinaryWriter writer)
    ldarg.1
    newobj instance void [mscorlib]System.IO.BinaryWriter::.ctor(class [mscorlib]System.IO.Stream)
    stloc.0

    ldloc.0
    // offset = this.fileStart - MetadataRoot.fileStart
    ldarg.0
    ldfld int64 StreamHeader::fileStart
    ldsfld int64 MetadataRoot::fileStart
    sub
    conv.i4
    callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(int32)

    ldloc.0
    // size = this.fileEnd - this.fileStart
    ldarg.0
    ldfld int64 StreamHeader::fileEnd
    ldarg.0
    ldfld int64 StreamHeader::fileStart
    sub
    conv.i4
    callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(int32)

    ldloc.0
    call class [mscorlib]System.Text.Encoding [mscorlib]System.Text.Encoding::get_UTF8()
    ldarg.0
    ldfld string StreamHeader::name
    callvirt instance uint8[] [mscorlib]System.Text.Encoding::GetBytes(string)
    callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(uint8[])

    ldloc.0
    ldc.i4.0
    callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(int8)

    ldc.i4.4
    call void C::ZeroUntilMultiple(unsigned int32)

    ret
  }
}

.class abstract sealed TildeStream {
  .field public static int64 fileStart
  .field public static int64 fileEnd
}

.class abstract sealed StringHeap {
  .field public static int64 fileStart
  .field public static int64 fileEnd

  .field static class [mscorlib]System.IO.Stream data
  .field static class [mscorlib]System.IO.StreamWriter writer
  .field static class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> cache

  .method static hidebysig specialname rtspecialname default void .cctor() {
    newobj instance void [mscorlib]System.IO.MemoryStream::.ctor()
    dup
    stsfld class [mscorlib]System.IO.Stream StringHeap::data
    newobj instance void [mscorlib]System.IO.StreamWriter::.ctor(class [mscorlib]System.IO.Stream)
    dup
    stsfld class [mscorlib]System.IO.StreamWriter StringHeap::writer
    ldc.i4.1
    callvirt instance void [mscorlib]System.IO.StreamWriter::set_AutoFlush(bool)

    newobj instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::.ctor()
    stsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> StringHeap::cache
    ret
  }

  // Returns index into the StringHeap, useable for a StringHeapIndex
  .method public static int32 Add(string key) {
    .locals init (int32 pos)
    ldsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> StringHeap::cache

    ldarg.0
    callvirt instance bool class [mscorlib]System.Collections.Generic.Dictionary`2<string, int32>::ContainsKey(!0)
    brfalse.s INSERT
    
    ldsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> StringHeap::cache
    ldarg.0
    callvirt instance !1 class [mscorlib]System.Collections.Generic.Dictionary`2<string, int32>::get_Item(!0)
    ret

INSERT:
    ldsfld class [mscorlib]System.IO.Stream StringHeap::data
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    conv.i4
    stloc.s pos
    
    ldsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> StringHeap::cache
    ldarg.0
    ldloc.s pos
    callvirt instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::set_Item(!0, !1)

    ldsfld class [mscorlib]System.IO.StreamWriter StringHeap::writer
    ldarg.0
    callvirt instance void [mscorlib]System.IO.StreamWriter::Write(string)
    ldsfld class [mscorlib]System.IO.StreamWriter StringHeap::writer
    ldc.i4.0
    callvirt instance void [mscorlib]System.IO.StreamWriter::Write(char)

    ldloc.s pos
    ret
  }

  .method public static void WriteHeap(class [mscorlib]System.IO.Stream) {
    ldarg.0
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stsfld int64 StringHeap::fileStart

    // Reposition the stream to the beginning
    ldsfld class [mscorlib]System.IO.Stream StringHeap::data
    ldc.i8 0
    callvirt instance void [mscorlib]System.IO.Stream::set_Position(int64)
    
    ldsfld class [mscorlib]System.IO.Stream StringHeap::data
    ldarg.0
    callvirt instance void [mscorlib]System.IO.Stream::CopyTo(class [mscorlib]System.IO.Stream)

    
    ldc.i4.4
    call void C::ZeroUntilMultiple(unsigned int32) // TODO should probably always use global C:: methods

    ldarg.0
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stsfld int64 StringHeap::fileEnd

    ret
  }
}

.class abstract sealed UserStringHeap {
  .field public static int64 fileStart
  .field public static int64 fileEnd

  .field static class [mscorlib]System.IO.Stream data
  .field static class [mscorlib]System.IO.StreamWriter writer
  .field static class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> cache

  .method static hidebysig specialname rtspecialname default void .cctor() {
    newobj instance void [mscorlib]System.IO.MemoryStream::.ctor()
    dup
    stsfld class [mscorlib]System.IO.Stream UserStringHeap::data
    dup
    ldc.i4.0
    callvirt instance void [mscorlib]System.IO.Stream::WriteByte(uint8)
    call class [mscorlib]System.Text.Encoding [mscorlib]System.Text.Encoding::get_Unicode() // UTF-16
    newobj instance void [mscorlib]System.IO.StreamWriter::.ctor(class [mscorlib]System.IO.Stream, class [mscorlib]System.Text.Encoding)
    dup
    stsfld class [mscorlib]System.IO.StreamWriter UserStringHeap::writer
    ldc.i4.1
    callvirt instance void [mscorlib]System.IO.StreamWriter::set_AutoFlush(bool)

    newobj instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::.ctor()
    dup
    stsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> UserStringHeap::cache

    // The first entry in is the empty 'blob' that consists of the single byte 0x00.
    ldstr ""
    ldc.i4.0
    callvirt instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::set_Item(!0, !1)

    ret
  }

  // Returns index into the UserStringHeap, useable for a UserStringHeapIndex
  .method public static int32 Add(string key) {
    .locals init (int32 pos)
    ldsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> UserStringHeap::cache

    ldarg.0
    callvirt instance bool class [mscorlib]System.Collections.Generic.Dictionary`2<string, int32>::ContainsKey(!0)
    brfalse.s INSERT
    
    ldsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> UserStringHeap::cache
    ldarg.0
    callvirt instance !1 class [mscorlib]System.Collections.Generic.Dictionary`2<string, int32>::get_Item(!0)
    ret

INSERT:
    ldsfld class [mscorlib]System.IO.Stream UserStringHeap::data
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    conv.i4
    stloc.s pos
    
    ldsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> UserStringHeap::cache
    ldarg.0
    ldloc.s pos
    callvirt instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::set_Item(!0, !1)

    // Write UTF-16 byte count + 1 for terminal trailing byte
    //TODO(not-implemented) This will be wrong if the length is greater than 0x7F; should use [10bbbbbb, x] => bbbbbb2 << 8 + x
    ldsfld class [mscorlib]System.IO.Stream UserStringHeap::data
    ldarg.0
    callvirt instance int32 [mscorlib]System.String::get_Length()
    ldc.i4.2
    mul
    ldc.i4.1
    add
    callvirt instance void [mscorlib]System.IO.Stream::WriteByte(uint8)

    ldsfld class [mscorlib]System.IO.StreamWriter UserStringHeap::writer
    ldarg.0
    callvirt instance void [mscorlib]System.IO.StreamWriter::Write(string)

    // Write 1 if any Unicode characters require handling beyond that normally provided for 8-bit encoding sets.
    //TODO(not-implemented) always write the trailing byte as 0, 
    ldsfld class [mscorlib]System.IO.Stream UserStringHeap::data
    ldc.i4.0
    callvirt instance void [mscorlib]System.IO.Stream::WriteByte(uint8)

    ldloc.s pos
    ret
  }

  .method public static void WriteHeap(class [mscorlib]System.IO.Stream) {
    ldarg.0
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stsfld int64 UserStringHeap::fileStart

    // Reposition the stream to the beginning
    ldsfld class [mscorlib]System.IO.Stream UserStringHeap::data
    ldc.i8 0
    callvirt instance void [mscorlib]System.IO.Stream::set_Position(int64)
    
    ldsfld class [mscorlib]System.IO.Stream UserStringHeap::data
    ldarg.0
    callvirt instance void [mscorlib]System.IO.Stream::CopyTo(class [mscorlib]System.IO.Stream)

    ldc.i4.4
    call void C::ZeroUntilMultiple(unsigned int32) 

    ldarg.0
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stsfld int64 UserStringHeap::fileEnd

    ret
  }
}

.class abstract sealed BlobHeap {
  .field public static int64 fileStart
  .field public static int64 fileEnd

  .field static class [mscorlib]System.IO.Stream data
  .field static class [mscorlib]System.IO.BinaryWriter writer
  .field static class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> cache

  .method static hidebysig specialname rtspecialname default void .cctor() {
    newobj instance void [mscorlib]System.IO.MemoryStream::.ctor()
    dup
    stsfld class [mscorlib]System.IO.Stream BlobHeap::data
    newobj instance void [mscorlib]System.IO.BinaryWriter::.ctor(class [mscorlib]System.IO.Stream)
    stsfld class [mscorlib]System.IO.BinaryWriter BlobHeap::writer

    newobj instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::.ctor()
    stsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> BlobHeap::cache

    ret
  }

  // Returns index into the BlobHeap, useable for a BlobHeapIndex
  .method public static int32 Add(uint8[]) {
    .locals init (int32 pos, string key)
    ldarg.0
    call string [mscorlib]System.Convert::ToBase64String(uint8[])
    stloc.s key

    ldsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> BlobHeap::cache
    ldloc.s key
    callvirt instance bool class [mscorlib]System.Collections.Generic.Dictionary`2<string, int32>::ContainsKey(!0)
    brfalse.s INSERT
    
    ldsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> BlobHeap::cache
    ldloc.s key
    callvirt instance !1 class [mscorlib]System.Collections.Generic.Dictionary`2<string, int32>::get_Item(!0)
    ret

INSERT:
    ldsfld class [mscorlib]System.IO.Stream BlobHeap::data
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    conv.i4
    stloc.s pos
    
    ldsfld class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32> BlobHeap::cache
    ldloc.s key
    ldloc.s pos
    callvirt instance void class [mscorlib]System.Collections.Generic.Dictionary`2<string,int32>::set_Item(!0, !1)

    // Write byte count
    //TODO(not-implemented) This will be wrong if the length is greater than 0x7F; should use [10bbbbbb, x] => bbbbbb2 << 8 + x
    ldsfld class [mscorlib]System.IO.Stream BlobHeap::data
    ldarg.0
    ldlen
    callvirt instance void [mscorlib]System.IO.Stream::WriteByte(uint8)

    ldsfld class [mscorlib]System.IO.BinaryWriter BlobHeap::writer
    ldarg.0
    callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(uint8[])

    ldloc.s pos
    ret
  }

  .method public static void WriteHeap(class [mscorlib]System.IO.Stream) {
    ldarg.0
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stsfld int64 BlobHeap::fileStart

    // Reposition the stream to the beginning
    ldsfld class [mscorlib]System.IO.Stream BlobHeap::data
    ldc.i8 0
    callvirt instance void [mscorlib]System.IO.Stream::set_Position(int64)
    
    ldsfld class [mscorlib]System.IO.Stream BlobHeap::data
    ldarg.0
    callvirt instance void [mscorlib]System.IO.Stream::CopyTo(class [mscorlib]System.IO.Stream)

    ldc.i4.4
    call void C::ZeroUntilMultiple(unsigned int32) 

    ldarg.0
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stsfld int64 BlobHeap::fileEnd

    ret
  }
}

.class abstract sealed GuidHeap {
  .field public static int64 fileStart
  .field public static int64 fileEnd

  .method public static void WriteHeap(class [mscorlib]System.IO.Stream) {
    ldarg.0
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stsfld int64 GuidHeap::fileStart

    //TODO(not-implemented) Allow storing other GUIDS
    ldc.i4.s 0xF1
    call void C::Write(uint8)
    ldc.i4.s 0x8C
    call void C::Write(uint8)
    ldc.i4.s 0xA3
    call void C::Write(uint8)
    ldc.i4.s 0x6D
    call void C::Write(uint8)
    ldc.i4.s 0x12
    call void C::Write(uint8)
    ldc.i4.s 0x23
    call void C::Write(uint8)
    ldc.i4.s 0x95
    call void C::Write(uint8)
    ldc.i4.s 0x4B
    call void C::Write(uint8)
    ldc.i4.s 0xBD
    call void C::Write(uint8)
    ldc.i4.s 0xF6
    call void C::Write(uint8)
    ldc.i4.s 0xA3
    call void C::Write(uint8)
    ldc.i4.s 0x91
    call void C::Write(uint8)
    
    ldc.i4.s 0x03
    call void C::Write(uint8)
    ldc.i4.s 0x2E
    call void C::Write(uint8)
    ldc.i4.s 0xA6
    call void C::Write(uint8)
    ldc.i4.s 0x85
    call void C::Write(uint8)

    ldarg.0
    callvirt instance int64 class [mscorlib]System.IO.Stream::get_Position()
    stsfld int64 GuidHeap::fileEnd

    ret
  }
}
