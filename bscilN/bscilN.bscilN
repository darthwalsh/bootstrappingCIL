.assembly A {}
.class C {
.field static class [mscorlib]System.IO.Stream output
.field static class [mscorlib]System.IO.BinaryWriter binWriter

.method static void Write(uint8 b) {
  ldsfld class [mscorlib]System.IO.Stream C::output
  ldarg b
  callvirt instance void [mscorlib]System.IO.Stream::WriteByte(uint8)
  ret
}

.method static void Write(int8) {
  ldsfld class [mscorlib]System.IO.BinaryWriter C::binWriter
  ldarg.0
  callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(int8)
  ret
}

.method static void Write(int16) {
  ldsfld class [mscorlib]System.IO.BinaryWriter C::binWriter
  ldarg.0
  callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(int16)
  ret
}

.method static void Write(int32) {
  ldsfld class [mscorlib]System.IO.BinaryWriter C::binWriter
  ldarg.0
  callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(int32)
  ret
}

.method static void Write(int64) {
  ldsfld class [mscorlib]System.IO.BinaryWriter C::binWriter
  ldarg.0
  callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(int64)
  ret
}

.method static void Write(uint8[]) {
  ldsfld class [mscorlib]System.IO.BinaryWriter C::binWriter
  ldarg.0
  callvirt instance void [mscorlib]System.IO.BinaryWriter::Write(uint8[])
  ret
}

.method static void WriteUTF8(string) {
  ldarg.0
  call class [mscorlib]System.Text.Encoding [mscorlib]System.Text.Encoding::get_UTF8()
  call void C::Write(string, class [mscorlib]System.Text.Encoding)
  ret
}

.method static void Write(string s, class [mscorlib]System.Text.Encoding e) {
  ldarg.s e
  ldarg.s s
  callvirt instance uint8[] [mscorlib]System.Text.Encoding::GetBytes(string)
  call void C::Write(uint8[])
  ret
}

.method static void WriteAll(class [mscorlib]System.IO.Stream) {
  // Reposition the stream to the beginning
  ldarg.0
  ldc.i8 0
  callvirt instance void [mscorlib]System.IO.Stream::set_Position(int64)

  ldarg.0
  ldsfld class [mscorlib]System.IO.Stream C::output
  callvirt instance void [mscorlib]System.IO.Stream::CopyTo(class [mscorlib]System.IO.Stream)

  ret
}

.method static void ZeroUntil(uint32 n) {
LOOP_START:
  call int64 C::Pos()
  ldarg n
  conv.i8
  bge.s LOOP_END // while .Position < n
  ldc.i4.0
  call void C::Write(uint8)
  br.s LOOP_START
LOOP_END:
  ret
}

.method static void ZeroUntilMultiple(uint32 n) {
LOOP_START:
  call int64 C::Pos()
  ldarg n
  conv.i8
  rem
  brfalse.s LOOP_END // while .Position % n != 0
  ldc.i4.0
  call void C::Write(uint8)
  br.s LOOP_START
LOOP_END:
  ret
}

.method static int64 Pos() {
  ldsfld class [mscorlib]System.IO.Stream C::output
  callvirt instance int64 [mscorlib]System.IO.Stream::get_Position()
  ret
}

// Expects args: "source" "-OUTPUT=output.exe"
//   eventually will need to implement parsing reading multiple input files
.method static void M(string[] args) {
.entrypoint
call void C::SeedHeaps()

// input = args[0]
ldarg.0
ldc.i4.0
ldelem.ref
call class [mscorlib]System.IO.FileStream class [mscorlib]System.IO.File::OpenRead(string)
call void Reader::Init(class [mscorlib]System.IO.Stream)
call void Parser::Parse()

// output = args[1]
ldarg.0
ldc.i4.1
ldelem.ref

// output.Split(['=', ':'], 2)
// Only split into two parts, in case the output path contains '=' or ':'
ldc.i4.2 
newarr char
dup
ldc.i4.0 
ldc.i4.s 0x3d // '='
stelem.i2 
dup 
ldc.i4.1 
ldc.i4.s 0x3a // ':'
stelem.i2 

ldc.i4.2
callvirt instance string[] string::Split(char[], int32)
ldc.i4.1 
ldelem.ref 

ldc.i4.2 // FileMode.Create
call class [mscorlib]System.IO.FileStream class [mscorlib]System.IO.File::Open(string, valuetype [mscorlib]System.IO.FileMode)
dup
stsfld class [mscorlib]System.IO.Stream C::output
newobj instance void class [mscorlib]System.IO.BinaryWriter::.ctor(class [mscorlib]System.IO.Stream)
stsfld class [mscorlib]System.IO.BinaryWriter C::binWriter

call void C::WriteFileTwice()

ldsfld class [mscorlib]System.IO.Stream C::output
callvirt instance void class [mscorlib]System.IDisposable::Dispose()

ret
}

// In order to calculate forward RVAs and offsets, we need at least two passes through the output.
// The first pass will write garbage for forward offsets, then writing the link target will save the position.
.method static void WriteFileTwice() {
call void C::WriteFile()

ldsfld class [mscorlib]System.IO.Stream C::output
ldc.i8 0
callvirt instance void [mscorlib]System.IO.Stream::set_Position(int64)

call void C::WriteFile()
ret
}

.method static void WriteFile() {
call void PEHeader::Write()
call void C::WriteTextSection()
call void C::WriteRelocSection()
ret
}

.method static void WriteTextSection() {
  call void ImportAddressTable::Write()
  call void CLIHeader::Write()

// Methods[0] Main 
ldc.i4.s 0x5E
call void C::Write(uint8)
ldc.i4.s 0x72
call void C::Write(uint8)
ldc.i4.s 0x01
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x70
call void C::Write(uint8)
ldc.i4.s 0x1F
call void C::Write(uint8)
ldc.i4.s 0x2C
call void C::Write(uint8)
ldc.i4.s 0x8C
call void C::Write(uint8)
ldc.i4.s 0x01
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x1B
call void C::Write(uint8)
ldc.i4.s 0x28
call void C::Write(uint8)
ldc.i4.s 0x01
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
 
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x0A
call void C::Write(uint8)
ldc.i4.s 0x28
call void C::Write(uint8)
ldc.i4.s 0x02
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x0A
call void C::Write(uint8)
ldc.i4.s 0x2A
call void C::Write(uint8)

  // Streams and Heaps
  call void MetadataRoot::Write()
  call void TildeStream::Write()
  call void StringHeap::WriteHeap()
  call void UserStringHeap::WriteHeap()
  call void GuidHeap::WriteHeap()
  call void BlobHeap::WriteHeap()

  ldc.i4 0x10
  call void C::ZeroUntilMultiple(uint32)

  call void EndingImports::Write()
 
  ldc.i4 0x600
  call void C::ZeroUntil(uint32)

  ret
}

.method static void WriteRelocSection() {
//TODO(no-reloc-section) can we remove this?
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x20
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x0C
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x90
call void C::Write(uint8)
ldc.i4.s 0x32
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)
ldc.i4.s 0x00
call void C::Write(uint8)

ldc.i4 0x800
call void C::ZeroUntil(uint32)

ret
}

.method static void SeedHeaps() {
  call void C::SeedStringHeap()
  call void C::SeedUserStringHeap()
  call void C::SeedBlobHeap()
  call void C::SeedTildeStream()
  ret
}

.method static void SeedStringHeap() {
  // TODO load these strings by parsing the assembly input. Right now seed these in the specific order that was chosen by ilasm.
  ldstr ""
  call int32 StringHeap::Add(string)
  pop

  ldstr "Addr.exe"
  call int32 StringHeap::Add(string)
  pop

  ldstr "World"
  call int32 StringHeap::Add(string)
  pop
  
  ldstr "<Module>"
  call int32 StringHeap::Add(string)
  pop

  ldstr "mscorlib"
  call int32 StringHeap::Add(string)
  pop

  ldstr "Hello"
  call int32 StringHeap::Add(string)
  pop

  ldstr "Int32"
  call int32 StringHeap::Add(string)
  pop

  ldstr "System"
  call int32 StringHeap::Add(string)
  pop

  ldstr "String"
  call int32 StringHeap::Add(string)
  pop

  ldstr "Console"
  call int32 StringHeap::Add(string)
  pop

  ldstr "Main"
  call int32 StringHeap::Add(string)
  pop

  ldstr "Object"
  call int32 StringHeap::Add(string)
  pop

  ldstr "Concat"
  call int32 StringHeap::Add(string)
  pop

  ldstr "WriteLine"
  call int32 StringHeap::Add(string)
  pop

  ret
}

.method static void SeedUserStringHeap() {
  // TODO load these strings by parsing the assembly input. Right now seed these in the specific order that was chosen by ilasm.
  ldstr "Hello, World!"
  call int32 UserStringHeap::Add(string)
  pop
  
  ret
}

.method static void SeedBlobHeap() {
  // TODO load these by parsing the assembly input. Right now seed these in the specific order that was chosen by ilasm.
  // []
  ldc.i4.0
  newarr uint8
  call int32 BlobHeap::Add(uint8[])
  pop
  
  // [08] TypeSpecSig int32
  ldc.i4.1
  newarr uint8
  dup
  ldc.i4.0
  ldc.i4.s 8
  stelem.i1
  call int32 BlobHeap::Add(uint8[])
  pop
  
  // [00 00 01] MethodDefSig static void ()
  ldc.i4.3
  newarr uint8
  dup
  ldc.i4.0
  ldc.i4.0
  stelem.i1
  dup
  ldc.i4.1
  ldc.i4.0
  stelem.i1
  dup
  ldc.i4.2
  ldc.i4.1
  stelem.i1
  call int32 BlobHeap::Add(uint8[])
  pop

  // [00 02 0E 1C 1C] MethodRefSig static string (object, object)
  ldc.i4.5
  newarr uint8
  dup
  ldc.i4.0
  ldc.i4.0
  stelem.i1
  dup
  ldc.i4.1
  ldc.i4.2
  stelem.i1
  dup
  ldc.i4.2
  ldc.i4.s 0x0E 
  stelem.i1
  dup
  ldc.i4.3
  ldc.i4.s 0x1C
  stelem.i1
  dup
  ldc.i4.4
  ldc.i4.s 0x1C
  stelem.i1
  call int32 BlobHeap::Add(uint8[])
  pop

  // [00 01 01 0E] MethodRefSig static void (string)
  ldc.i4.4
  newarr uint8
  dup
  ldc.i4.0
  ldc.i4.0
  stelem.i1
  dup
  ldc.i4.1
  ldc.i4.1
  stelem.i1
  dup
  ldc.i4.2
  ldc.i4.1
  stelem.i1
  dup
  ldc.i4.3
  ldc.i4.s 0x0E
  stelem.i1
  call int32 BlobHeap::Add(uint8[])
  pop
  
  ret
}

.method static void SeedTildeStream() {
  .locals init (
    class Token mscorlib,
    class Token objectRef,
    class Token stringRef,
    class Token consoleRef)

  ldstr "Addr.exe"
  ldc.i4.s 0x01
  call class Token TildeStream::AddModule(string, int16)
  pop

  ldc.i4.0 // Flags
  ldc.i4.0 // PublicKey
  ldstr "mscorlib"
  ldstr "" // Culture
  ldc.i4.0 // HashValue
  call class Token TildeStream::AddAssemblyRef(uint32, uint16, string, string, uint16)
  stloc mscorlib

  ldloc mscorlib
  ldstr "Int32"
  ldstr "System"
  call class Token TildeStream::AddTypeRef(class Token, string, string)
  pop

  ldloc mscorlib
  ldstr "String"
  ldstr "System"
  call class Token TildeStream::AddTypeRef(class Token, string, string)
  stloc stringRef

  ldloc mscorlib
  ldstr "Console"
  ldstr "System"
  call class Token TildeStream::AddTypeRef(class Token, string, string)
  stloc consoleRef

  ldloc mscorlib
  ldstr "Object"
  ldstr "System"
  call class Token TildeStream::AddTypeRef(class Token, string, string)
  stloc objectRef

  ldc.i4.0 // Flags
  ldstr "<Module>"
  ldstr ""
  ldnull
  ldc.i4.1 // FieldList
  ldc.i4.1 // MethodList
  call class Token TildeStream::AddTypeDef(uint32, string, string, class Token, uint16, uint16)
  pop

  ldc.i4.0 // Flags
  ldstr "Hello"
  ldstr ""
  ldloc objectRef
  ldc.i4.1 // FieldList
  ldc.i4.1 // MethodList
  call class Token TildeStream::AddTypeDef(uint32, string, string, class Token, uint16, uint16)
  pop

  ldc.i4 0x2050 // RVA
  ldc.i4.0 // ImplFlags
  ldc.i4 0x10 // Flags
  ldstr "Main" // Name
  ldc.i4 0x03 // TODO Signature, ditto below
  ldc.i4 1 // ParamList
  call class Token TildeStream::AddMethodDef(uint32, uint16, uint16, string, uint16, uint16)
  pop

  ldloc stringRef
  ldstr "Concat"
  ldc.i4 0x07 // Signature
  call class Token TildeStream::AddMemberRef(class Token, string, uint16)
  pop

  ldloc consoleRef
  ldstr "WriteLine"
  ldc.i4 0x0D // Signature
  call class Token TildeStream::AddMemberRef(class Token, string, uint16)
  pop

  ldc.i4 0x01 // TODO blob heap index
  call class Token TildeStream::AddTypeSpec(uint16)
  pop

  ldc.i4.0 // HashAlgId AssemblyHashAlgorithm.None
  ldc.i4.0 // Flags
  ldc.i4.0 // PublicKey
  ldstr "World"
  ldstr "" // Culture
  call class Token TildeStream::AddAssembly(uint32, uint32, uint16, string, string)
  pop
  
  ret
}
}
